AWSTemplateFormatVersion: "2010-09-09"
Description: |
  This template deploys an LSF management server, mounts the NFS file system, and
  installs the LSF packages provided by the user.

  **WARNING** This template creates AWS resources. 
  You will be billed for the AWS resources used if you create a stack from this template.

Mappings:
  RegionMap:
    us-east-1:  
      CentOS75: ami-9887c6e7
      FPGADev: ami-0cf12acd587e51b42
      ALinux2: not-used-dynamic-lookup-via-ssm
    us-east-2:  
      CentOS75: ami-0f2b4fc905b0bd1f1
      FPGADev: ami-0f522eea547ffbdde
      ALinux2: not-used-dynamic-lookup-via-ssm
    us-west-1:
      CentOS75: ami-074e2d6769f445be5
      FPGADev: ami-02ed13c760b58790d
      ALinux2: not-used-dynamic-lookup-via-ssm
    us-west-2:
      CentOS75: ami-3ecc8f46
      FPGADev: ami-00736db43ba03656a
      ALinux2: not-used-dynamic-lookup-via-ssm
    eu-west-1:           # Dublin
      CentOS75: ami-3548444c
      FPGADev: ami-01f373e791bb05667
      ALinux2: not-used-dynamic-lookup-via-ssm
    ap-southeast-1:      # Singapore
      CentOS75: ami-8e0205f2
      FPGADev: ami-0d2658414ef6f29cf
      ALinux2: not-used-dynamic-lookup-via-ssm
    ap-southeast-2:      # Sydney
      CentOS75: ami-d8c21dba
      FPGADev: ami-0651d0a596bb7c014
      ALinux2: not-used-dynamic-lookup-via-ssm
      ALinux2: not-used-dynamic-lookup-via-ssm
    ap-northeast-2:      # Seoul
      CentOS75: ami-06cf2a72dadf92410
      FPGADev: ami-03162ccf408e174a1
      ALinux2: not-used-dynamic-lookup-via-ssm
    ap-northeast-1:      # Tokyo
      CentOS75: ami-045f38c93733dd48d
      FPGADev: ami-051c91d3186bfdb7d
      ALinux2: not-used-dynamic-lookup-via-ssm

Parameters:
  TemplateSourceBucketEndpoint:
    Description: From which bucket to deploy the nested stacks and scripts
    Default: 'aws-eda-workshop-files'
    Type: String
  AdminKeyPair:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the master server."
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "morrmt"
    AllowedPattern: ".+"
  MasterInstanceType:
    Description: "The desired instance type for the master node of the cluster."
    Type: "String"
    Default: "m5.2xlarge"
  LatestAmazonLinux2Ami:
    Description: AMI (OS image) for the master server.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  MasterServerAMI:
    Type: "String"
    Default: ALinux2
    AllowedValues:
      - ALinux2
  ComputeAMI:
    Description: AMI (OS image) for the compute nodes.  
      NOTE - You must first subscribe to this AMI in the AWS Marketplace at https://aws.amazon.com/marketplace/pp/B00O7WM7QW"
    Type: "String"
    Default: "FPGADev"
    AllowedValues:
      - ALinux2
      - CentOS75
      - FPGADev
  LSFClusterName:
    Description: "The name of the LSF cluster."
    Type: "String"
    Description: |- 
      An environment name that will be prefixed to resource names.
      Should be equal to the value in the network stack.
    Default: "LSFCluster"
  LSFInstallPath:
    Description: Path where LSF will be installed.
    Type: "String"
    Default: "/tools/ibm/lsf"
  FileSystemMountPoint:
    Description: Directory where the NFS file system will be mounted (EFS, FSxN or FSxZ).
    Type: "String"
    Default: "/nfs"
  CustomerLSFInstallUri:
    Description: >
      The S3 URI to the LSF installation script package. 
      Select object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_lsfinstall_linux_x86_64.tar.Z"
  CustomerLSFBinsUri:
    Description: The S3 URI to the LSF 10.1 Linux base distribution package. 
      Select object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_linux2.6-glibc2.3-x86_64.tar.Z"
  CustomerLSFFixPackUri:
    Description: >
      The S3 URI to the LSF 10.1 Fix Pack package. This must the lastest cumulative Fix Pack package.
      Select package object in the console and choose Copy Path and paste here.
    Type: "String"
    Default: "s3://<your_bucket>/lsf10.1_linux2.6-glibc2.3-x86_64.520009.tar.Z"
  CustomerLSFEntitlementUri:
    Description: The S3 URI to the LSF entitlement file, lsf_std_entitlement.dat or lsf_adv_entitlement.dat.
      Select object in the S3 console and choose Copy Path and paste here.
    Type: String
    Default: s3://<your_bucket>/lsf_std_entitlement.dat
  DCVUserName:
    Type: String
    Default: simuser

Conditions:
  UseAmazonLinux2AMI: !Equals
    - !Ref ComputeAMI
    - ALinux2

Resources:
  LSFMasterInstance:
    Type: "AWS::EC2::Instance"
    CreationPolicy:
      ResourceSignal:    
        Count: 1
        Timeout: PT15M
    Properties:
      InstanceType: !Ref MasterInstanceType
      ImageId: !If
                - UseAmazonLinux2AMI
                - Ref: LatestAmazonLinux2Ami
                - !FindInMap [ RegionMap, !Ref "AWS::Region", !Ref MasterServerAMI ] 
      SubnetId:
          Fn::ImportValue: !Sub '${LSFClusterName}-PrivateSubnet'
      SecurityGroupIds:
        - Fn::ImportValue:  !Sub '${LSFClusterName}-LSFMasterSG'
      KeyName: !Ref AdminKeyPair
      IamInstanceProfile: !Ref LSFMasterInstanceProfile
      Tags:
        - 
          Key: "Name"
          Value: !Join [ '-', [ 'LSF Mgmt Host',!Ref LSFClusterName ] ]
        - 
          Key: "Cluster"
          Value: !Ref LSFClusterName
      UserData:
        Fn::Base64: 
          Fn::Sub:
            - |
              Content-Type: multipart/mixed; boundary="//"
              MIME-Version: 1.0

              --//
              Content-Type: text/cloud-config; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="cloud-config.txt"

              #cloud-config
              cloud_final_modules:
              - [scripts-user, always]

              --//
              Content-Type: text/x-shellscript; charset="us-ascii"
              MIME-Version: 1.0
              Content-Transfer-Encoding: 7bit
              Content-Disposition: attachment; filename="userdata.txt"

              #!/bin/bash

              set -x
              exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1

              # Print user data
              INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              cat /var/lib/cloud/instances/$INSTANCE_ID/user-data.txt

              echo "*** BEGIN LSF MASTER BOOTSTRAP ***"

              # Create local environment file to re-use later
              cat <<EOF > /root/bootstrap.env
              AWS_CFN_STACK_NAME=${AWS::StackName}
              AWS_CFN_STACK_REGION=${AWS::Region}
              AWS_S3_BUCKET_ENDPOINT=${TemplateSourceBucketEndpoint}
              AWS_S3_BUCKET_NAME=$(echo "${TemplateSourceBucketEndpoint}" | cut -d '.' -f 1)
              CFN_LSF_INSTALL_URI=${CustomerLSFInstallUri}
              CFN_LSF_BIN_URI=${CustomerLSFBinsUri}
              CFN_LSF_ENTITLEMENT_URI=${CustomerLSFEntitlementUri} 
              CFN_LSF_FIXPACK_URI=${CustomerLSFFixPackUri}
              CFN_EC2_KEY_PAIR=${AdminKeyPair}
              CFN_COMPUTE_NODE_AMI=${LSFComputeNodeAmi}
              CFN_COMPUTE_NODE_SUBNET=${LSFComputeNodeSubnet}
              CFN_COMPUTE_NODE_SG_ID=${LSFComputeNodeSGGroupId}
              CFN_COMPUTE_NODE_INSTANCE_PROFILE_ARN="${LSFComputeNodeInstanceProfileArn}"
              CFN_COMPUTE_SPOT_FLEET_ROLE_ARN="${LSFComputeNodeSpotFleetRoleArn}"
              CFN_DCV_USERNAME=${DCVUserName}
              CFN_LAUNCH_TEMPLATE_ID=${LaunchTemplate}
              LSF_INSTALL_DIR="${FileSystemMountPoint}${LSFInstallPath}/${LSFClusterName}"
              LSF_ADMIN=lsfadmin
              LSF_CLUSTER_NAME=${LSFClusterName}
              LSF_INSTALL_PKG=`echo ${CustomerLSFInstallUri} | awk -F "/" '{print $NF}'`
              LSF_BIN_PKG=`echo ${CustomerLSFBinsUri} | awk -F "/" '{print $NF}'`
              LSF_FP_PKG=`echo ${CustomerLSFFixPackUri} | awk -F "/" '{print $NF}'`
              LSF_ENTITLEMENT=`echo ${CustomerLSFEntitlementUri} | awk -F "/" '{print $NF}'`
              NFS_DNS_NAME=${NfsDnsName}
              NFS_MOUNT_POINT=${FileSystemMountPoint}
              EOF
              export $(grep -v '^#' /root/bootstrap.env | xargs)

              # Install cfn-signal helper script to signal bootstrap completion to CloudFormation
              yum install aws-cfn-bootstrap ed java-1.8.0-openjdk wget vim -q -y && \

              # Prepare NFS
              aws s3 cp s3://$AWS_S3_BUCKET_NAME/workshops/eda-workshop-lsf/scripts/nfs-bootstrap-master.sh  - | bash && \

              # Install LSF using customer-provided packages
              aws s3 cp s3://$AWS_S3_BUCKET_NAME/workshops/eda-workshop-lsf/scripts/install-lsf.sh  - | bash  && \

              # Configure lsf configuration (lsf.conf, lsf.cluster.*)
              aws s3 cp s3://$AWS_S3_BUCKET_NAME/workshops/eda-workshop-lsf/scripts/config-lsf.sh - | bash && \

              # mosquitto.conf.  Enables mostquitto daemon, which RC uses to show bhosts -rc output.
              aws s3 cp s3://$AWS_S3_BUCKET_NAME/workshops/eda-workshop-lsf/config/mosquitto.conf $LSF_ENVDIR/mosquitto.conf && \
              chown $LSF_ADMIN $LSF_ENVDIR/mosquitto.conf && \

              # Configure system scripts to start LSF at boot time
              # Add cshrc.lsf and profile.lsf to system-wide environment
              # Start LSF daemons

              source $LSF_INSTALL_DIR/conf/profile.lsf

              $LSF_INSTALL_DIR/10.1/install/hostsetup --top="$LSF_INSTALL_DIR" \
                                                      --profile="y" \
                                                      --start="y"  && \

              # Verify that LSF is up and send signal to Cloudformation
              sleep 5 && lsid
              /opt/aws/bin/cfn-signal -e $? --stack $AWS_CFN_STACK_NAME \
                                            --resource LSFMasterInstance \
                                            --region $AWS_CFN_STACK_REGION

              echo "*** END LSF MASTER BOOTSTRAP ***"
              --//--

            - LSFComputeNodeInstanceProfileArn: !GetAtt LSFComputeNodeInstanceProfile.Arn
              LSFComputeNodeSpotFleetRoleArn: !GetAtt LSFSpotFleetRole.Arn
              LSFComputeNodeAmi: !If
                - UseAmazonLinux2AMI
                - Ref: LatestAmazonLinux2Ami
                - !FindInMap [ RegionMap, !Ref "AWS::Region", !Ref ComputeAMI ]
              LSFComputeNodeSGGroupId:
                Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"LSFComputeNodeSG" ] ]
              LSFComputeNodeSubnet:
                Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"PrivateSubnet" ] ]
              NfsDnsName:
                Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"NfsDnsName" ] ]

  LSFMasterRole:
      Type: "AWS::IAM::Role"
      Properties:
        Description: AWS service permissions for LSF Resource Connector
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                - "ec2.amazonaws.com"
              Action:
              - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        Policies:
          - PolicyName: LSFResourceConnectorPerms
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - ec2:AssociateIamInstanceProfile
                    - ec2:CancelSpotFleetRequests
                    - ec2:CreateFleet     
                    - ec2:CreateLaunchTemplateVersion
                    - ec2:CreateTags
                    - ec2:DeleteLaunchTemplateVersions
                    - ec2:DescribeFleetInstances
                    - ec2:DescribeFleets
                    - ec2:DescribeInstances
                    - ec2:DescribeInstanceStatus
                    - ec2:DescribeKeyPairs
                    - ec2:DescribeLaunchTemplateVersions
                    - ec2:DescribeSpotFleetInstances
                    - ec2:DescribeSpotFleetRequestHistory
                    - ec2:DescribeSpotFleetRequests
                    - ec2:DescribeSpotInstanceRequests
                    - ec2:DescribeTags
                    - ec2:GetLaunchTemplateData
                    - ec2:ModifyIdFormat
                    - ec2:ModifySpotFleetRequest
                    - ec2:ReplaceIamInstanceProfileAssociation
                    - ec2:RequestSpotFleet
                    - ec2:RunInstances
                    - ec2:TerminateInstances
                  Resource: '*'
                - Effect: Allow
                  Action:
                    - iam:PassRole
                    - iam:ListRoles
                    - iam:ListInstanceProfiles
                    - iam:CreateServiceLinkedRole
                  Resource:
                    - !GetAtt LSFSpotFleetRole.Arn
                    - !GetAtt LSFComputeNodeRole.Arn
                  Condition:
                      StringEquals:
                        iam:PassedToService:
                            "ec2.amazonaws.com"
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: '*'
  
  LSFSpotFleetRole:
      Type: "AWS::IAM::Role"
      Properties:
        Description: Enables EC2 Spot Fleet to work on behalf of LSF Resource Connector
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                - "spotfleet.amazonaws.com"
              Action:
              - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"

  LSFComputeNodeRole:
      Type: "AWS::IAM::Role"
      Properties:
        Description: AWS service permissions for LSF compute nodes
        Path: "/"
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - 
              Effect: Allow
              Principal:
                Service:
                - "ec2.amazonaws.com"
              Action:
              - "sts:AssumeRole"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        Policies:
          - PolicyName: DownloadS3Packages
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource: '*'

  LSFMasterInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref LSFMasterRole

  LSFComputeNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref LSFComputeNodeRole

  CloudWatchAgentConfiguration:
    Type: AWS::SSM::Parameter
    Properties:
      Description: SSM Parameter holding CloudWatchAgent configuration
      Name: !Sub ${AWS::StackName}-AmazonCloudWatch
      Type: String
      Value: |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
            "debug": false
          },
          "logs": {
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/lsf/aws-provider.log*",
                    "log_group_name": "/var/log/lsf/rc/aws-provider.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/aws-provider.log*",
                    "log_group_name": "/var/log/lsf/rc/ebrokerd",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/Install.log*",
                    "log_group_name": "/var/log/lsf/Install.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/lim.log*",
                    "log_group_name": "/var/log/lsf/lim.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/mbatchd.log*",
                    "log_group_name": "/var/log/lsf/mbatchd.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/mbschd.log*",
                    "log_group_name": "/var/log/lsf/mbschd.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/mosquitto.log*",
                    "log_group_name": "/var/log/lsf/mosquitto.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/pim.log*",
                    "log_group_name": "/var/log/lsf/pim.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/res.log*",
                    "log_group_name": "/var/log/lsf/res.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/lsf/sbatchd.log*",
                    "log_group_name": "/var/log/lsf/sbatchd.log",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/user-data.log*",
                    "log_group_name": "/var/log/lsf/user-data.log",
                    "log_stream_name": "{instance_id}"
                  }
                ]
              }
            }
          },
          "metrics": {
            "namespace": "CWAgent",
            "append_dimensions": {
              "InstanceId": "${aws:InstanceId}"
            },
            "metrics_collected": {
              "mem": {
                "measurement": ["mem_used_percent"],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  AmazonCloudWatchSetConfig:
    Type: AWS::SSM::Association
    Properties:
      ApplyOnlyAtCronInterval: false
      AssociationName: AmazonCloudWatchSetConfig
      Name: AmazonCloudWatch-ManageAgent
      Parameters:
        action:
          - configure
        mode:
          - ec2
        optionalConfigurationLocation:
          - !Ref CloudWatchAgentConfiguration
        optionalConfigurationSource:
          - ssm
        optionalRestart:
          - "yes"
      ScheduleExpression: cron(0 */30 * * * ? *)
      Targets:
        - Key: tag:Name
          Values:
            - !Join [ '-', [ 'LSF Mgmt Host',!Ref LSFClusterName ] ]

  InstallCloudWatch:
    Type: AWS::SSM::Association
    Properties:
      Name: AWS-ConfigureAWSPackage
      ApplyOnlyAtCronInterval: false
      AssociationName: InstallUpgradeCloudWatch
      Parameters:
        action:
          - Install
        additionalArguments:
          - "{}"
        installationType:
          - Uninstall and reinstall
        name:
          - AmazonCloudWatchAgent
      ScheduleExpression: cron(0 */30 * * * ? *)
      Targets:
        - Key: tag:Name
          Values:
            - !Join [ '-', [ 'LSF Mgmt Host',!Ref LSFClusterName ] ]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData: 
        ImageId: !If
                - UseAmazonLinux2AMI
                - Ref: LatestAmazonLinux2Ami
                - !FindInMap [ RegionMap, !Ref "AWS::Region", !Ref ComputeAMI ]
        KeyName: !Ref AdminKeyPair
        IamInstanceProfile:
          Arn: !GetAtt LSFComputeNodeInstanceProfile.Arn
        SecurityGroupIds: 
          - Fn::ImportValue: !Join [ '-', [ !Ref LSFClusterName,"LSFComputeNodeSG" ] ]